// Generated by CoffeeScript 1.7.1
(function() {
  var JRule;

  JRule = (function() {
    function JRule(opts) {
      this.opts = opts != null ? opts : {};
      this.setup_border_rulers();
      if (typeof console !== "undefined" && console !== null) {
        console.log('jrule ready!');
      }
    }

    JRule.prototype.default_opts = function() {};

    JRule.prototype.setup_border_rulers = function() {
      return this.border_rulers = new JRule.BorderRulers();
    };

    return JRule;

  })();

  JRule.BorderRulers = (function() {
    function BorderRulers(opts) {
      this.opts = opts != null ? opts : {};
      this.default_opts();
      this.setup_rulers();
    }

    BorderRulers.prototype.default_opts = function() {
      var defaults;
      defaults = {
        style: {
          backgroundColor: "#0cf",
          opacity: .6
        },
        top: true,
        left: true,
        right: false,
        bottom: false,
        tick_distance: 100,
        rule_size: 45
      };
      return this.opts = defaults;
    };

    BorderRulers.prototype.get_style = function() {
      return {
        backgroundColor: this.opts.style.bg_color,
        opacity: this.opts.style.opacity
      };
    };

    BorderRulers.prototype.setup_rulers = function(force) {
      var create_ruler, left_ruler, top_ruler;
      if (force == null) {
        force = false;
      }
      if (this.setup && !force) {
        return;
      }
      if (this.setup && force) {
        this.destroy();
      }
      create_ruler = (function(_this) {
        return function() {
          var rule;
          rule = document.createElement("div");
          rule.style = _this.get_style();
          rule.position = "fixed";
          return rule.zIndex = 9999;
        };
      })(this);
      if (this.opts.top) {
        top_ruler = create_ruler();
        top_ruler.left = 0;
        top_ruler.right = 0;
        top_ruler.top = 0;
        top_ruler.height = this.opts.rule_size;
        document.body.appendChild(top_ruler);
      }
      if (this.opts.left) {
        left_ruler = create_ruler();
        left_ruler.left = 0;
        left_ruler.top = 0;
        left_ruler.bottom = 0;
        left_ruler.width = this.opts.rule_size;
        document.body.appendChild(left_ruler);
      }
      this.setup = true;
      return this;
    };

    BorderRulers.prototype.destroy = function() {};

    return BorderRulers;

  })();

}).call(this);
