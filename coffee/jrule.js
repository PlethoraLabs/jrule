// Generated by CoffeeScript 1.7.1
(function() {
  var JRule;

  JRule = (function() {
    function JRule(opts) {
      this.opts = opts != null ? opts : {};
      this.setup_border_rulers();
      if (typeof console !== "undefined" && console !== null) {
        console.log('jrule ready!');
      }
    }

    JRule.prototype.default_opts = function() {};

    JRule.prototype.setup_border_rulers = function() {
      return this.border_rulers = new JRule.BorderRulers();
    };

    return JRule;

  })();

  JRule.BorderRulers = (function() {
    function BorderRulers(opts) {
      this.opts = opts != null ? opts : {};
      this.rulers = {};
      this.mouse_ticks = {};
      this.mousex = 0;
      this.mousey = 0;
      this.default_opts();
      this.setup_rulers();
      this.setup_events();
    }

    BorderRulers.prototype.default_opts = function() {
      var defaults;
      defaults = {
        style: {
          backgroundColor: "#f1f1f1",
          opacity: .5,
          tickColor: "#ccc",
          mouseTickColor: "#00f"
        },
        top: true,
        left: true,
        right: false,
        bottom: false,
        tick_distance: 100,
        rule_size: 25,
        divisions: 8,
        show_mouse: true
      };
      return this.opts = defaults;
    };

    BorderRulers.prototype.get_style = function() {
      return {
        backgroundColor: this.opts.style.backgroundColor,
        opacity: this.opts.style.opacity
      };
    };

    BorderRulers.prototype.setup_rulers = function(force) {
      var create_ruler, left_ruler, name, ruler, top_ruler, _ref;
      if (force == null) {
        force = false;
      }
      if (this.setup && !force) {
        return;
      }
      if (this.setup && force) {
        this.destroy();
      }
      create_ruler = (function(_this) {
        return function() {
          var key, rule, val, _ref;
          rule = document.createElement("div");
          _ref = _this.get_style();
          for (key in _ref) {
            val = _ref[key];
            rule.style[key] = val;
          }
          rule.className = "ruler";
          rule.style.position = "fixed";
          rule.style.zIndex = 4000;
          return rule;
        };
      })(this);
      if (this.opts.top) {
        top_ruler = create_ruler();
        top_ruler.style.left = 0;
        top_ruler.style.right = 0;
        top_ruler.style.top = 0;
        top_ruler.style.height = "" + this.opts.rule_size + "px";
        this.rulers.top = top_ruler;
      }
      if (this.opts.left) {
        left_ruler = create_ruler();
        left_ruler.style.left = 0;
        left_ruler.style.top = 0;
        left_ruler.style.bottom = 0;
        left_ruler.style.width = "" + this.opts.rule_size + "px";
        this.rulers.left = left_ruler;
      }
      _ref = this.rulers;
      for (name in _ref) {
        ruler = _ref[name];
        document.body.appendChild(ruler);
      }
      this.setup_ticks();
      this.setup = true;
      return this;
    };

    BorderRulers.prototype.setup_events = function() {
      if (this.opts.show_mouse) {
        return document.addEventListener('mousemove', (function(_this) {
          return function(e) {
            _this.mousex = e.clientX;
            _this.mousey = e.clientY;
            return _this.render();
          };
        })(this));
      }
    };

    BorderRulers.prototype.tick_style = function(side) {
      var style;
      style = {
        position: "absolute",
        display: "block",
        backgroundColor: this.opts.style.tickColor
      };
      if (side === "top" || side === "bottom") {
        style.width = "1px";
        style.height = "100%";
      } else {
        style.width = "100%";
        style.height = "1px";
      }
      return style;
    };

    BorderRulers.prototype.setup_ticks = function() {
      var div_pos, division_distance, doc_rect, i, j, mouse_pos, mouse_x_tick, mouse_y_tick, side, tick_distance, tick_pos, ticks, _i, _j, _k, _len, _ref, _ref1;
      doc_rect = document.body.getBoundingClientRect();
      ticks = Math.ceil(doc_rect.width / this.opts.tick_distance);
      tick_distance = Math.round(doc_rect.width / ticks);
      division_distance = Math.round(tick_distance / this.opts.divisions);
      _ref = ['top', 'left'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        side = _ref[_i];
        for (i = _j = 0; 0 <= ticks ? _j < ticks : _j > ticks; i = 0 <= ticks ? ++_j : --_j) {
          tick_pos = i * tick_distance;
          this.draw_tick(side, tick_pos, .8);
          for (j = _k = 0, _ref1 = this.opts.divisions; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
            div_pos = j * division_distance + tick_pos;
            this.draw_tick(side, div_pos, (j % 2 ? .3 : .5));
          }
        }
      }
      if (this.opts.show_mouse) {
        if (this.rulers.hasOwnProperty('top')) {
          mouse_x_tick = this.create_tick('top', Math.round(doc_rect.width / 2), 1);
          mouse_x_tick.style.backgroundColor = "" + this.opts.style.mouseTickColor;
          this.mouse_ticks.x = mouse_x_tick;
          this.rulers.top.appendChild(this.mouse_ticks.x);
        }
        if (this.rulers.hasOwnProperty('left')) {
          mouse_y_tick = this.create_tick('left', Math.round(doc_rect.width / 2), 1);
          mouse_y_tick.style.backgroundColor = "" + this.opts.style.mouseTickColor;
          this.mouse_ticks.y = mouse_y_tick;
          this.rulers.left.appendChild(this.mouse_ticks.y);
        }
        mouse_pos = document.createElement("div");
        mouse_pos.style.position = "fixed";
        mouse_pos.style.zIndex = 5000;
        mouse_pos.style.left = 0;
        mouse_pos.style.top = 0;
        mouse_pos.style.padding = "6px";
        mouse_pos.style.backgroundColor = "#888";
        mouse_pos.style.color = "#fafafa";
        mouse_pos.style.fontSize = "12px";
        mouse_pos.style.fontFamily = "sans-serif";
        mouse_pos.style.fontWeight = 100;
        this.mouse_pos = mouse_pos;
        return document.body.appendChild(this.mouse_pos);
      }
    };

    BorderRulers.prototype.create_tick = function(side, pos, height) {
      var key, new_tick, val, _ref;
      if (height == null) {
        height = 1;
      }
      new_tick = document.createElement("div");
      _ref = this.tick_style(side);
      for (key in _ref) {
        val = _ref[key];
        new_tick.style[key] = val;
      }
      new_tick.className = "tick";
      if (side === "top" || side === "bottom") {
        new_tick.style.left = "" + pos + "px";
        new_tick.style.height = "" + (100 * height) + "%";
      } else {
        new_tick.style.top = "" + pos + "px";
        new_tick.style.width = "" + (100 * height) + "%";
      }
      return new_tick;
    };

    BorderRulers.prototype.draw_tick = function(side, pos, height) {
      var new_tick;
      if (height == null) {
        height = 1;
      }
      if (this.rulers.hasOwnProperty(side)) {
        new_tick = this.create_tick(side, pos, height);
        return this.rulers[side].appendChild(new_tick);
      } else {
        return false;
      }
    };

    BorderRulers.prototype.destroy = function() {};

    BorderRulers.prototype.render = function() {
      if (this.opts.show_mouse) {
        if (this.mouse_ticks.x) {
          this.mouse_ticks.x.style.left = "" + this.mousex + "px";
        }
        if (this.mouse_ticks.y) {
          this.mouse_ticks.y.style.top = "" + this.mousey + "px";
        }
        return this.mouse_pos.innerText = "" + this.mousex + ", " + this.mousey;
      }
    };

    return BorderRulers;

  })();

  document.JRule = JRule;

}).call(this);
