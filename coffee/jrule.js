// Generated by CoffeeScript 1.7.1
(function() {
  var JRule;

  JRule = (function() {
    function JRule(opts) {
      this.opts = opts != null ? opts : {};
      this.setup_border_rulers();
      if (typeof console !== "undefined" && console !== null) {
        console.log('jrule ready!');
      }
    }

    JRule.prototype.default_opts = function() {};

    JRule.prototype.setup_border_rulers = function() {
      return this.border_rulers = new JRule.BorderRulers();
    };

    return JRule;

  })();

  JRule.BorderRulers = (function() {
    function BorderRulers(opts) {
      this.opts = opts != null ? opts : {};
      this.rulers = {};
      this.default_opts();
      this.setup_rulers();
    }

    BorderRulers.prototype.default_opts = function() {
      var defaults;
      defaults = {
        style: {
          backgroundColor: "#f1f1f1",
          opacity: .5,
          tickColor: "#888"
        },
        top: true,
        left: true,
        right: false,
        bottom: false,
        tick_distance: 100,
        rule_size: 25,
        divisions: 8
      };
      return this.opts = defaults;
    };

    BorderRulers.prototype.get_style = function() {
      return {
        backgroundColor: this.opts.style.backgroundColor,
        opacity: this.opts.style.opacity
      };
    };

    BorderRulers.prototype.setup_rulers = function(force) {
      var create_ruler, left_ruler, name, ruler, top_ruler, _ref;
      if (force == null) {
        force = false;
      }
      if (this.setup && !force) {
        return;
      }
      if (this.setup && force) {
        this.destroy();
      }
      create_ruler = (function(_this) {
        return function() {
          var key, rule, val, _ref;
          rule = document.createElement("div");
          _ref = _this.get_style();
          for (key in _ref) {
            val = _ref[key];
            rule.style[key] = val;
          }
          rule.className = "ruler";
          rule.style.position = "fixed";
          rule.style.zIndex = 9999;
          return rule;
        };
      })(this);
      if (this.opts.top) {
        top_ruler = create_ruler();
        top_ruler.style.left = 0;
        top_ruler.style.right = 0;
        top_ruler.style.top = 0;
        top_ruler.style.height = "" + this.opts.rule_size + "px";
        this.rulers.top = top_ruler;
      }
      if (this.opts.left) {
        left_ruler = create_ruler();
        left_ruler.style.left = 0;
        left_ruler.style.top = 0;
        left_ruler.style.bottom = 0;
        left_ruler.style.width = "" + this.opts.rule_size + "px";
        this.rulers.left = left_ruler;
      }
      _ref = this.rulers;
      for (name in _ref) {
        ruler = _ref[name];
        document.body.appendChild(ruler);
      }
      this.setup_ticks();
      this.setup = true;
      return this;
    };

    BorderRulers.prototype.tick_style = function(side) {
      var style;
      style = {
        position: "absolute",
        display: "block"
      };
      if (side === "top" || side === "bottom") {
        style.borderRight = "1px solid " + this.opts.style.tickColor;
        style.width = "1px";
        style.height = "100%";
      } else {
        style.borderTop = "1px solid " + this.opts.style.tickColor;
        style.width = "100%";
        style.height = "1px";
      }
      return style;
    };

    BorderRulers.prototype.setup_ticks = function() {
      var div_pos, division_distance, doc_rect, i, j, side, tick_distance, tick_pos, ticks, _i, _len, _ref, _results;
      doc_rect = document.body.getBoundingClientRect();
      ticks = Math.ceil(doc_rect.width / this.opts.tick_distance);
      tick_distance = Math.round(doc_rect.width / ticks);
      division_distance = Math.round(tick_distance / this.opts.divisions);
      _ref = ['top', 'left'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        side = _ref[_i];
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 0; 0 <= ticks ? _j < ticks : _j > ticks; i = 0 <= ticks ? ++_j : --_j) {
            tick_pos = i * tick_distance;
            this.draw_tick(side, tick_pos, .8);
            _results1.push((function() {
              var _k, _ref1, _results2;
              _results2 = [];
              for (j = _k = 0, _ref1 = this.opts.divisions; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
                div_pos = j * division_distance + tick_pos;
                _results2.push(this.draw_tick(side, div_pos, (j % 2 ? .3 : .5)));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BorderRulers.prototype.draw_tick = function(side, pos, height) {
      var key, new_tick, val, _ref;
      if (height == null) {
        height = 1;
      }
      new_tick = document.createElement("div");
      _ref = this.tick_style(side);
      for (key in _ref) {
        val = _ref[key];
        new_tick.style[key] = val;
      }
      new_tick.className = "tick";
      if (side === "top" || side === "bottom") {
        new_tick.style.left = "" + pos + "px";
        new_tick.style.height = "" + (100 * height) + "%";
      } else {
        new_tick.style.top = "" + pos + "px";
        new_tick.style.width = "" + (100 * height) + "%";
      }
      if (this.rulers.hasOwnProperty(side)) {
        return this.rulers[side].appendChild(new_tick);
      } else {
        return false;
      }
    };

    BorderRulers.prototype.destroy = function() {};

    return BorderRulers;

  })();

  document.JRule = JRule;

}).call(this);
